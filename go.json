{
	// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Functional Options Pattern": {
		"prefix": "opt",
		"body": [
			"type ${1:type} struct {",
			"  ${2:opt1} string",
			"  ${3:opt2} int",
			"}",
			"",
			"func New(options ...func(*${1:type})) *${1:type} {",
			"  svr := &${1:type}{}",
			"  for _, o := range options {",
			"    o(svr)",
			"  }",
			"  return svr",
			"}",
			"func With${2/(.*)/${1:/pascalcase}/}(${2/(.*)/${1:/camelcase}/} string) func(*${1:type}) {",
			"  return func(s *${1:type}) {",
			"    s.${2:opt1} = ${2/(.*)/${1:/camelcase}/}",
			"  }",
			"}",
			"",
			"func With${3/(.*)/${1:/pascalcase}/}(${3/(.*)/${1:/camelcase}/} int) func(*${1:type}) {",
			"  return func(s *${1:type}) {",
			"    s.${3:opt2} = ${3/(.*)/${1:/camelcase}/}",
			"  }",
			"}",
			"svr := ${1:type}.New(",
			"    ${1/(.*)/${1:/downcase}/}.With${2/(.*)/${1:/pascalcase}/}(\"localhost\"),",
			"    ${1/(.*)/${1:/downcase}/}.With${3/(.*)/${1:/pascalcase}/}(8080),",
			")"
		],
		"description": "Snippet for Functional Options Pattern: https://golang.cafe/blog/golang-functional-options-pattern.html"
	},
	"capitalize replacements": {
		"prefix": "cap",
		"body": [
			"type ${1:type} struct {",
			"  ${2:host} string",
			"  ${3:port} int",
			"}",
			"",
			"choice: ${4|one,two,three|}",
			"pascalcase of ${2} -> ${2/(.*)/${1:/pascalcase}/}",
			"camelcase  of ${2} -> ${2/(.*)/${1:/camelcase}/}",
			"capitalize of ${2} -> ${2/(.*)/${1:/capitalize}/}",
			"downcase   of ${2} -> ${2/(.*)/${1:/downcase}/}",
			"upcase     of ${2} -> ${2/(.*)/${1:/upcase}/}",
			"${TM_FILENAME/(.*)\\..+$/$1/}"
		],
		"description": "replace with cap"
	}
}
