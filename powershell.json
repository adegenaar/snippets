{
	// Place your snippets for powershell here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// The VSCode Built-in powershell snippets are located:
	//      https://github.com/PowerShell/vscode-powershell/blob/main/snippets/PowerShell.json
	"Complete function definition": {
		"prefix": "fun",
		"body": [
			"# Function help can be here...",
			"function ${name:Verb-Noun} {",
			"# or function help can be here...",
			"\t[CmdletBinding(DefaultParameterSetName='Parameter Set 1',",
			"\t               SupportsShouldProcess=\\$true,",
			"\t               PositionalBinding=\\$false,",
			"\t               HelpUri = 'http://www.microsoft.com/',",
			"\t               ConfirmImpact='Medium')]",
			"\t[Alias()]",
			"\t[OutputType([String])]",
			"\tParam (",
			"\t\t# Param1 help description",
			"\t\t[Parameter(Mandatory=\\$true,",
			"\t\t           Position=0,",
			"\t\t           ValueFromPipeline=\\$true,",
			"\t\t           ValueFromPipelineByPropertyName=\\$true,",
			"\t\t           ValueFromRemainingArguments=\\$false, ",
			"\t\t           ParameterSetName='Parameter Set 1')]",
			"\t\t[ValidateNotNull()]",
			"\t\t[ValidateNotNullOrEmpty()]",
			"\t\t[ValidateCount(0,5)]",
			"\t\t[ValidateSet(\"sun\", \"moon\", \"earth\")]",
			"\t\t[Alias(\"p1\")] ",
			"\t\t\\$Param1,",
			"\t\t",
			"\t\t# Param2 help description",
			"\t\t[Parameter(ParameterSetName='Parameter Set 1')]",
			"\t\t[AllowNull()]",
			"\t\t[AllowEmptyCollection()]",
			"\t\t[AllowEmptyString()]",
			"\t\t[ValidateScript({\\$true})]",
			"\t\t[ValidateRange(0,5)]",
			"\t\t[int]",
			"\t\t\\$Param2,",
			"\t\t",
			"\t\t# Param3 help description",
			"\t\t[Parameter(ParameterSetName='Another Parameter Set')]",
			"\t\t[ValidatePattern(\"[a-z]*\")]",
			"\t\t[ValidateLength(0,15)]",
			"\t\t[String]",
			"\t\t\\$Param3",
			"\t)",
			"\t",
			"\tbegin {",
			"\t}",
			"\t",
			"\tprocess {",
			"\t\tif (\\$pscmdlet.ShouldProcess(\"Target\", \"Operation\")) {",
			"\t\t\t$0",
			"\t\t}",
			"\t}",
			"\t",
			"\tend {",
			"\t}",
			"",
			"#region Help",
			"# but since the help format is annoying, put it at the endof the function...",
			"<#",
			".SYNOPSIS",
			"\t${1:A short one-line action-based description, e.g. 'Tests if a function is valid'}",
			".DESCRIPTION",
			"\t${2:A longer description of the function, its purpose, common use cases, etc.}",
			".EXAMPLE",
			"\t${3:Test-MyTestFunction -Verbose}",
			".EXAMPLE",
			"\t${4:Test-MyTestFunction -Verbose}",
			".INPUTS",
			"\t${5:Inputs to this cmdlet (if any)}",
			".OUTPUTS",
			"\t${6:Output from this cmdlet (if any)}",
			".NOTES",
			"\t${7:General notes}",
			".LINK",
			"\t${8:Specify a URI to a help page, this will show when Get-Help -Online is used.}",
			".COMPONENT",
			"\t${9:The component this cmdlet belongs to}",
			".ROLE",
			"\t${10:The role this cmdlet belongs to}",
			".FUNCTIONALITY",
			"\t${11:The functionality that best describes this cmdlet}",
			"\t${12:Explanation of the function or its result. You can include multiple examples with additional .EXAMPLE lines}",
			"#>",
			"#endregion",
			"",
			"}",
			"",
			"${0:$TM_SELECTED_TEXT}"
		],
		"description": "A complete function defintion including help"
	},
	"Throw Terminating Error": {
		"prefix": "error-terminating",
		"body": [
			"\\$Exception     = New-Object ${1:System.ArgumentException} (\"${2:Invalid argument provided.}\")\r",
			"\\$ErrorCategory = [System.Management.Automation.ErrorCategory]::${3:InvalidArgument}\r",
			"# Exception, ErrorId as [string], Category, and TargetObject (e.g. the parameter that was invalid)\r",
			"\\$ErrorRecord   = New-Object System.Management.Automation.ErrorRecord(\\$Exception, '${4:InvalidArgument}', \\$ErrorCategory, ${5:\\$null})\r",
			"\\$PSCmdlet.ThrowTerminatingError(\\$ErrorRecord)"
		],
		"description": "Throw a full terminating error."
	},
	//pester snippets from: https://github.com/PowerShell/vscode-powershell/blob/main/docs/community_snippets.md
	"PesterContext": {
		"prefix": "Context-Pester",
		"description": "Pester - Context block",
		"body": [
			"Context \"${1:ContextName}\" {",
			"\t${0:$TM_SELECTED_TEXT}",
			"}"
		]
	},
	"PesterContextIt": {
		"prefix": "Context-It-Pester",
		"description": "Pester - Context block with nested It block",
		"body": [
			"Context \"${1:ContextName}\" {",
			"\tIt \"${2:ItName}\" {",
			"\t\t${3:${TM_SELECTED_TEXT:Assertion}}",
			"\t}$0",
			"}"
		]
	},
	"PesterDescribeBlock": {
		"prefix": "Describe-Pester",
		"description": "Pester Describe block",
		"body": [
			"Describe \"${1:DescribeName}\" {",
			"\t${0:TM_SELECTED_TEXT}",
			"}"
		]
	},
	"PesterDescribeContextIt": {
		"prefix": "Describe-Context-It-Pester",
		"description": "Pester Describe block with nested Context & It blocks",
		"body": [
			"Describe \"${1:DescribeName}\" {",
			"\tContext \"${2:ContextName}\" {",
			"\t\tIt \"${3:ItName}\" {",
			"\t\t\t${4:${TM_SELECTED_TEXT:Assertion}}",
			"\t\t}$0",
			"\t}",
			"}"
		]
	},
	"PesterIt": {
		"prefix": "It-Pester",
		"description": "Pester - It block",
		"body": [
			"It \"${1:ItName}\" {",
			"\t${2:${TM_SELECTED_TEXT:Assertion}}",
			"}$0"
		]
	},
	"Pester for Parameter": {
		"prefix": "Param Pester",
		"body": [
			"It \"${1:FunctionName} Should have a parameter ${2:ParameterName}\" {",
			"\t(Get-Command ${1:FunctionName}).Parameters['${2:ParameterName}'].Count | Should -Be 1",
			"}"
		],
		"description": "Pester Test for Parameter"
	},
	"AssertMock": {
		"prefix": "AssertMock",
		"body": [
			"$$assertMockParams = @{",
			"\t'CommandName' = '${1:Command}'",
			"\t'Times'       = ${2:1}",
			"\t'Exactly'     = $$true",
			"}",
			"Assert-MockCalled @assertMockParams"
		],
		"description": "AssertMock snippet for Pestering"
	},
	"Parameter-Credential": {
		"prefix": "parameter-credential",
		"body": [
			"# Specifies the user account credentials to use when performing this task.\r",
			"[Parameter()]\r",
			"[ValidateNotNull()]\r",
			"[System.Management.Automation.PSCredential]\r",
			"[System.Management.Automation.Credential()]\r",
			"$$Credential${1: = [System.Management.Automation.PSCredential]::Empty}"
		],
		"description": "Parameter declaration snippet for a Credential parameter."
	},
	"HtML header": {
		"prefix": "ex-AddHTMLheader",
		"body": [
			"#HTML file and styles",
			"\\$htmlHeader = @\"",
			"<!doctype html\">",
			"<html lang=\"e\">",
			"<head>",
			"<meta charset=\"UTF-8\">",
			"<title>${1:Title}</title>",
			"<style type=\"text/css\">",
			"body {",
			"}",
			"</style>",
			"</head>",
			"\"@"
		],
		"description": "Add HTML header section"
	},
	"Example-Class": {
		"prefix": "ex-class",
		"description": "Example: class snippet with a constructor, property and a method",
		"body": [
			"class ${1:MyClass} {",
			"\t# Property: Holds name",
			"\t[String] \\$Name",
			"",
			"\t# Constructor: Creates a new MyClass object, with the specified name",
			"\t${1:MyClass}([String] \\$NewName) {",
			"\t\t# Set name for ${1:MyClass}",
			"\t\t\\$this.Name = \\$NewName",
			"\t}",
			"",
			"\t# Method: Method that changes \\$Name to the default name",
			"\t[void] ChangeNameToDefault() {",
			"\t\t\\$this.Name = \"DefaultName\"",
			"\t}",
			"}"
		]
	}
}
